
// Generated by dojo-bindgen on Thu, 22 Aug 2024 19:02:53 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { Account, byteArray } from "starknet";
import { DojoProvider } from "@dojoengine/core";
import * as models from "./models.gen";

export type IWorld = Awaited<ReturnType<typeof setupWorld>>;

export async function setupWorld(provider: DojoProvider) {
    // System definitions for `ok-arena` contract
    function arena() {
        const contract_name = "arena";

        
        // Call the `move` system with the specified Account and calldata
        const move = async (props: { account: Account, game_id: number, piece_id: number, to: models.Vec2 }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "move",
                        calldata: [props.game_id,
                props.piece_id,
                props.to.x,
                    props.to.y],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `attack` system with the specified Account and calldata
        const attack = async (props: { account: Account, game_id: number, piece_id: number, target: models.Vec2 }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "attack",
                        calldata: [props.game_id,
                props.piece_id,
                props.target.x,
                    props.target.y],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            move, attack, world
        };
    }

    // System definitions for `ok-a` contract
    function a() {
        const contract_name = "a";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_move_pattern` system with the specified Account and calldata
        const get_move_pattern = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_move_pattern",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_attack_pattern` system with the specified Account and calldata
        const get_attack_pattern = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_attack_pattern",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_attack` system with the specified Account and calldata
        const get_attack = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_attack",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_base_health` system with the specified Account and calldata
        const get_base_health = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_base_health",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_ability_effect` system with the specified Account and calldata
        const get_ability_effect = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_ability_effect",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_ability_pattern` system with the specified Account and calldata
        const get_ability_pattern = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_ability_pattern",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            world, get_move_pattern, get_attack_pattern, get_attack, get_base_health, get_ability_effect, get_ability_pattern
        };
    }

    // System definitions for `ok-b` contract
    function b() {
        const contract_name = "b";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_move_pattern` system with the specified Account and calldata
        const get_move_pattern = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_move_pattern",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_attack_pattern` system with the specified Account and calldata
        const get_attack_pattern = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_attack_pattern",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_attack` system with the specified Account and calldata
        const get_attack = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_attack",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_base_health` system with the specified Account and calldata
        const get_base_health = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_base_health",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_ability_effect` system with the specified Account and calldata
        const get_ability_effect = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_ability_effect",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `get_ability_pattern` system with the specified Account and calldata
        const get_ability_pattern = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "get_ability_pattern",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            world, get_move_pattern, get_attack_pattern, get_attack, get_base_health, get_ability_effect, get_ability_pattern
        };
    }

    // System definitions for `ok-gov` contract
    function gov() {
        const contract_name = "gov";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `add_piece` system with the specified Account and calldata
        const add_piece = async (props: { account: Account, address: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "add_piece",
                        calldata: [props.address],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `add_effect` system with the specified Account and calldata
        const add_effect = async (props: { account: Account, address: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "add_effect",
                        calldata: [props.address],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `set_damage_contract` system with the specified Account and calldata
        const set_damage_contract = async (props: { account: Account, address: bigint }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "set_damage_contract",
                        calldata: [props.address],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            world, add_piece, add_effect, set_damage_contract
        };
    }

    // System definitions for `ok-gacha` contract
    function gacha() {
        const contract_name = "gacha";

        
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `mint` system with the specified Account and calldata
        const mint = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "mint",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            world, mint
        };
    }

    // System definitions for `ok-matchmaking` contract
    function matchmaking() {
        const contract_name = "matchmaking";

        
        // Call the `create_game` system with the specified Account and calldata
        const create_game = async (props: { account: Account, team_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create_game",
                        calldata: [props.team_id],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `join_game` system with the specified Account and calldata
        const join_game = async (props: { account: Account, game_id: number, team_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "join_game",
                        calldata: [props.game_id,
                props.team_id],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `start_game` system with the specified Account and calldata
        const start_game = async (props: { account: Account, game_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "start_game",
                        calldata: [props.game_id],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            create_game, join_game, start_game, world
        };
    }

    // System definitions for `ok-teambuilder` contract
    function teambuilder() {
        const contract_name = "teambuilder";

        
        // Call the `create_team` system with the specified Account and calldata
        const create_team = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "create_team",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `add_piece_to_team` system with the specified Account and calldata
        const add_piece_to_team = async (props: { account: Account, team_id: number, piece_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "add_piece_to_team",
                        calldata: [props.team_id,
                props.piece_id],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `remove_piece_from_team` system with the specified Account and calldata
        const remove_piece_from_team = async (props: { account: Account, team_id: number, piece_id: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "remove_piece_from_team",
                        calldata: [props.team_id,
                props.piece_id],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            create_team, add_piece_to_team, remove_piece_from_team, world
        };
    }

    // System definitions for `ok-damage` contract
    function damage() {
        const contract_name = "damage";

        
        // Call the `set_amt` system with the specified Account and calldata
        const set_amt = async (props: { account: Account, amt: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "set_amt",
                        calldata: [props.amt],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `apply` system with the specified Account and calldata
        const apply = async (props: { account: Account, target: number }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "apply",
                        calldata: [props.target],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

    
        // Call the `world` system with the specified Account and calldata
        const world = async (props: { account: Account }) => {
            try {
                return await provider.execute(
                    props.account,
                    {
                        contractName: contract_name,
                        entrypoint: "world",
                        calldata: [],
                    },
                    "ok"
                );
            } catch (error) {
                console.error("Error executing spawn:", error);
                throw error;
            }
        };
            

        return {
            set_amt, apply, world
        };
    }

    return {
        arena: arena(),
        a: a(),
        b: b(),
        gov: gov(),
        gacha: gacha(),
        matchmaking: matchmaking(),
        teambuilder: teambuilder(),
        damage: damage()
    };
}
